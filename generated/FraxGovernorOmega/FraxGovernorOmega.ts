// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddToDelegateCallAllowlist extends ethereum.Event {
  get params(): AddToDelegateCallAllowlist__Params {
    return new AddToDelegateCallAllowlist__Params(this);
  }
}

export class AddToDelegateCallAllowlist__Params {
  _event: AddToDelegateCallAllowlist;

  constructor(event: AddToDelegateCallAllowlist) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddToSafeAllowlist extends ethereum.Event {
  get params(): AddToSafeAllowlist__Params {
    return new AddToSafeAllowlist__Params(this);
  }
}

export class AddToSafeAllowlist__Params {
  _event: AddToSafeAllowlist;

  constructor(event: AddToSafeAllowlist) {
    this._event = event;
  }

  get safe(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class ProposalCanceled extends ethereum.Event {
  get params(): ProposalCanceled__Params {
    return new ProposalCanceled__Params(this);
  }
}

export class ProposalCanceled__Params {
  _event: ProposalCanceled;

  constructor(event: ProposalCanceled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get targets(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get signatures(): Array<string> {
    return this._event.parameters[4].value.toStringArray();
  }

  get calldatas(): Array<Bytes> {
    return this._event.parameters[5].value.toBytesArray();
  }

  get voteStart(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get voteEnd(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class ProposalExecuted extends ethereum.Event {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalThresholdSet extends ethereum.Event {
  get params(): ProposalThresholdSet__Params {
    return new ProposalThresholdSet__Params(this);
  }
}

export class ProposalThresholdSet__Params {
  _event: ProposalThresholdSet;

  constructor(event: ProposalThresholdSet) {
    this._event = event;
  }

  get oldProposalThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newProposalThreshold(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class QuorumNumeratorUpdated extends ethereum.Event {
  get params(): QuorumNumeratorUpdated__Params {
    return new QuorumNumeratorUpdated__Params(this);
  }
}

export class QuorumNumeratorUpdated__Params {
  _event: QuorumNumeratorUpdated;

  constructor(event: QuorumNumeratorUpdated) {
    this._event = event;
  }

  get oldQuorumNumerator(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newQuorumNumerator(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveFromDelegateCallAllowlist extends ethereum.Event {
  get params(): RemoveFromDelegateCallAllowlist__Params {
    return new RemoveFromDelegateCallAllowlist__Params(this);
  }
}

export class RemoveFromDelegateCallAllowlist__Params {
  _event: RemoveFromDelegateCallAllowlist;

  constructor(event: RemoveFromDelegateCallAllowlist) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RemoveFromSafeAllowlist extends ethereum.Event {
  get params(): RemoveFromSafeAllowlist__Params {
    return new RemoveFromSafeAllowlist__Params(this);
  }
}

export class RemoveFromSafeAllowlist__Params {
  _event: RemoveFromSafeAllowlist;

  constructor(event: RemoveFromSafeAllowlist) {
    this._event = event;
  }

  get safe(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SafeVotingPeriodSet extends ethereum.Event {
  get params(): SafeVotingPeriodSet__Params {
    return new SafeVotingPeriodSet__Params(this);
  }
}

export class SafeVotingPeriodSet__Params {
  _event: SafeVotingPeriodSet;

  constructor(event: SafeVotingPeriodSet) {
    this._event = event;
  }

  get safe(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldSafeVotingPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newSafeVotingPeriod(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ShortCircuitNumeratorUpdated extends ethereum.Event {
  get params(): ShortCircuitNumeratorUpdated__Params {
    return new ShortCircuitNumeratorUpdated__Params(this);
  }
}

export class ShortCircuitNumeratorUpdated__Params {
  _event: ShortCircuitNumeratorUpdated;

  constructor(event: ShortCircuitNumeratorUpdated) {
    this._event = event;
  }

  get oldShortCircuitNumerator(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newShortCircuitNumerator(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransactionProposed extends ethereum.Event {
  get params(): TransactionProposed__Params {
    return new TransactionProposed__Params(this);
  }
}

export class TransactionProposed__Params {
  _event: TransactionProposed;

  constructor(event: TransactionProposed) {
    this._event = event;
  }

  get safe(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get txHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get proposalId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VeFxsVotingDelegationSet extends ethereum.Event {
  get params(): VeFxsVotingDelegationSet__Params {
    return new VeFxsVotingDelegationSet__Params(this);
  }
}

export class VeFxsVotingDelegationSet__Params {
  _event: VeFxsVotingDelegationSet;

  constructor(event: VeFxsVotingDelegationSet) {
    this._event = event;
  }

  get oldVotingDelegation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newVotingDelegation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VoteCast extends ethereum.Event {
  get params(): VoteCast__Params {
    return new VoteCast__Params(this);
  }
}

export class VoteCast__Params {
  _event: VoteCast;

  constructor(event: VoteCast) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get support(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class VoteCastWithParams extends ethereum.Event {
  get params(): VoteCastWithParams__Params {
    return new VoteCastWithParams__Params(this);
  }
}

export class VoteCastWithParams__Params {
  _event: VoteCastWithParams;

  constructor(event: VoteCastWithParams) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get support(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[4].value.toString();
  }

  get params(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class VotingDelayBlocksSet extends ethereum.Event {
  get params(): VotingDelayBlocksSet__Params {
    return new VotingDelayBlocksSet__Params(this);
  }
}

export class VotingDelayBlocksSet__Params {
  _event: VotingDelayBlocksSet;

  constructor(event: VotingDelayBlocksSet) {
    this._event = event;
  }

  get oldVotingDelayBlocks(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingDelayBlocks(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VotingDelaySet extends ethereum.Event {
  get params(): VotingDelaySet__Params {
    return new VotingDelaySet__Params(this);
  }
}

export class VotingDelaySet__Params {
  _event: VotingDelaySet;

  constructor(event: VotingDelaySet) {
    this._event = event;
  }

  get oldVotingDelay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingDelay(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VotingPeriodSet extends ethereum.Event {
  get params(): VotingPeriodSet__Params {
    return new VotingPeriodSet__Params(this);
  }
}

export class VotingPeriodSet__Params {
  _event: VotingPeriodSet;

  constructor(event: VotingPeriodSet) {
    this._event = event;
  }

  get oldVotingPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FraxGovernorOmega__addTransactionInputArgsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }

  get operation(): i32 {
    return this[3].toI32();
  }

  get safeTxGas(): BigInt {
    return this[4].toBigInt();
  }

  get baseGas(): BigInt {
    return this[5].toBigInt();
  }

  get gasPrice(): BigInt {
    return this[6].toBigInt();
  }

  get gasToken(): Address {
    return this[7].toAddress();
  }

  get refundReceiver(): Address {
    return this[8].toAddress();
  }

  get _nonce(): BigInt {
    return this[9].toBigInt();
  }
}

export class FraxGovernorOmega__batchAddTransactionInputArgsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }

  get operation(): i32 {
    return this[3].toI32();
  }

  get safeTxGas(): BigInt {
    return this[4].toBigInt();
  }

  get baseGas(): BigInt {
    return this[5].toBigInt();
  }

  get gasPrice(): BigInt {
    return this[6].toBigInt();
  }

  get gasToken(): Address {
    return this[7].toAddress();
  }

  get refundReceiver(): Address {
    return this[8].toAddress();
  }

  get _nonce(): BigInt {
    return this[9].toBigInt();
  }
}

export class FraxGovernorOmega__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class FraxGovernorOmega__proposalVotesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAgainstVotes(): BigInt {
    return this.value0;
  }

  getForVotes(): BigInt {
    return this.value1;
  }

  getAbstainVotes(): BigInt {
    return this.value2;
  }
}

export class FraxGovernorOmega__proposalsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getProposer(): Address {
    return this.value0;
  }

  getVoteStart(): BigInt {
    return this.value1;
  }

  getVoteEnd(): BigInt {
    return this.value2;
  }

  getExecuted(): boolean {
    return this.value3;
  }

  getCanceled(): boolean {
    return this.value4;
  }
}

export class FraxGovernorOmega extends ethereum.SmartContract {
  static bind(address: Address): FraxGovernorOmega {
    return new FraxGovernorOmega("FraxGovernorOmega", address);
  }

  $delegateCallAllowlist(contractAddress: Address): BigInt {
    let result = super.call(
      "$delegateCallAllowlist",
      "$delegateCallAllowlist(address):(uint256)",
      [ethereum.Value.fromAddress(contractAddress)]
    );

    return result[0].toBigInt();
  }

  try_$delegateCallAllowlist(
    contractAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "$delegateCallAllowlist",
      "$delegateCallAllowlist(address):(uint256)",
      [ethereum.Value.fromAddress(contractAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  $gnosisSafeToNonceToTxHash(safe: Address, safeNonce: BigInt): Bytes {
    let result = super.call(
      "$gnosisSafeToNonceToTxHash",
      "$gnosisSafeToNonceToTxHash(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(safe),
        ethereum.Value.fromUnsignedBigInt(safeNonce)
      ]
    );

    return result[0].toBytes();
  }

  try_$gnosisSafeToNonceToTxHash(
    safe: Address,
    safeNonce: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "$gnosisSafeToNonceToTxHash",
      "$gnosisSafeToNonceToTxHash(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(safe),
        ethereum.Value.fromUnsignedBigInt(safeNonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  $safeAllowlist(safe: Address): BigInt {
    let result = super.call(
      "$safeAllowlist",
      "$safeAllowlist(address):(uint256)",
      [ethereum.Value.fromAddress(safe)]
    );

    return result[0].toBigInt();
  }

  try_$safeAllowlist(safe: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "$safeAllowlist",
      "$safeAllowlist(address):(uint256)",
      [ethereum.Value.fromAddress(safe)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  $safeVotingPeriod(safe: Address): BigInt {
    let result = super.call(
      "$safeVotingPeriod",
      "$safeVotingPeriod(address):(uint256)",
      [ethereum.Value.fromAddress(safe)]
    );

    return result[0].toBigInt();
  }

  try_$safeVotingPeriod(safe: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "$safeVotingPeriod",
      "$safeVotingPeriod(address):(uint256)",
      [ethereum.Value.fromAddress(safe)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  $snapshotTimestampToSnapshotBlockNumber(snapshot: BigInt): BigInt {
    let result = super.call(
      "$snapshotTimestampToSnapshotBlockNumber",
      "$snapshotTimestampToSnapshotBlockNumber(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(snapshot)]
    );

    return result[0].toBigInt();
  }

  try_$snapshotTimestampToSnapshotBlockNumber(
    snapshot: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "$snapshotTimestampToSnapshotBlockNumber",
      "$snapshotTimestampToSnapshotBlockNumber(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(snapshot)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  $votingDelayBlocks(): BigInt {
    let result = super.call(
      "$votingDelayBlocks",
      "$votingDelayBlocks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_$votingDelayBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "$votingDelayBlocks",
      "$votingDelayBlocks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BALLOT_TYPEHASH(): Bytes {
    let result = super.call(
      "BALLOT_TYPEHASH",
      "BALLOT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_BALLOT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "BALLOT_TYPEHASH",
      "BALLOT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CLOCK_MODE(): string {
    let result = super.call("CLOCK_MODE", "CLOCK_MODE():(string)", []);

    return result[0].toString();
  }

  try_CLOCK_MODE(): ethereum.CallResult<string> {
    let result = super.tryCall("CLOCK_MODE", "CLOCK_MODE():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  COUNTING_MODE(): string {
    let result = super.call("COUNTING_MODE", "COUNTING_MODE():(string)", []);

    return result[0].toString();
  }

  try_COUNTING_MODE(): ethereum.CallResult<string> {
    let result = super.tryCall("COUNTING_MODE", "COUNTING_MODE():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  EXTENDED_BALLOT_TYPEHASH(): Bytes {
    let result = super.call(
      "EXTENDED_BALLOT_TYPEHASH",
      "EXTENDED_BALLOT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_EXTENDED_BALLOT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EXTENDED_BALLOT_TYPEHASH",
      "EXTENDED_BALLOT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TIMELOCK_CONTROLLER(): Address {
    let result = super.call(
      "TIMELOCK_CONTROLLER",
      "TIMELOCK_CONTROLLER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_TIMELOCK_CONTROLLER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "TIMELOCK_CONTROLLER",
      "TIMELOCK_CONTROLLER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  VE_FXS(): Address {
    let result = super.call("VE_FXS", "VE_FXS():(address)", []);

    return result[0].toAddress();
  }

  try_VE_FXS(): ethereum.CallResult<Address> {
    let result = super.tryCall("VE_FXS", "VE_FXS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addTransaction(
    teamSafe: Address,
    args: FraxGovernorOmega__addTransactionInputArgsStruct,
    signatures: Bytes
  ): BigInt {
    let result = super.call(
      "addTransaction",
      "addTransaction(address,(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256),bytes):(uint256)",
      [
        ethereum.Value.fromAddress(teamSafe),
        ethereum.Value.fromTuple(args),
        ethereum.Value.fromBytes(signatures)
      ]
    );

    return result[0].toBigInt();
  }

  try_addTransaction(
    teamSafe: Address,
    args: FraxGovernorOmega__addTransactionInputArgsStruct,
    signatures: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addTransaction",
      "addTransaction(address,(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256),bytes):(uint256)",
      [
        ethereum.Value.fromAddress(teamSafe),
        ethereum.Value.fromTuple(args),
        ethereum.Value.fromBytes(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batchAddTransaction(
    teamSafes: Array<Address>,
    args: Array<FraxGovernorOmega__batchAddTransactionInputArgsStruct>,
    signatures: Array<Bytes>
  ): Array<BigInt> {
    let result = super.call(
      "batchAddTransaction",
      "batchAddTransaction(address[],(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)[],bytes[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(teamSafes),
        ethereum.Value.fromTupleArray(args),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_batchAddTransaction(
    teamSafes: Array<Address>,
    args: Array<FraxGovernorOmega__batchAddTransactionInputArgsStruct>,
    signatures: Array<Bytes>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "batchAddTransaction",
      "batchAddTransaction(address[],(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)[],bytes[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(teamSafes),
        ethereum.Value.fromTupleArray(args),
        ethereum.Value.fromBytesArray(signatures)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  cancel(
    param0: Array<Address>,
    param1: Array<BigInt>,
    param2: Array<Bytes>,
    param3: Bytes
  ): BigInt {
    let result = super.call(
      "cancel",
      "cancel(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(param0),
        ethereum.Value.fromUnsignedBigIntArray(param1),
        ethereum.Value.fromBytesArray(param2),
        ethereum.Value.fromFixedBytes(param3)
      ]
    );

    return result[0].toBigInt();
  }

  try_cancel(
    param0: Array<Address>,
    param1: Array<BigInt>,
    param2: Array<Bytes>,
    param3: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cancel",
      "cancel(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(param0),
        ethereum.Value.fromUnsignedBigIntArray(param1),
        ethereum.Value.fromBytesArray(param2),
        ethereum.Value.fromFixedBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVote(proposalId: BigInt, support: i32): BigInt {
    let result = super.call("castVote", "castVote(uint256,uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support))
    ]);

    return result[0].toBigInt();
  }

  try_castVote(proposalId: BigInt, support: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVote",
      "castVote(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteBySig(
    proposalId: BigInt,
    support: i32,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "castVoteBySig",
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_castVoteBySig(
    proposalId: BigInt,
    support: i32,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteBySig",
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteWithReason(proposalId: BigInt, support: i32, reason: string): BigInt {
    let result = super.call(
      "castVoteWithReason",
      "castVoteWithReason(uint256,uint8,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason)
      ]
    );

    return result[0].toBigInt();
  }

  try_castVoteWithReason(
    proposalId: BigInt,
    support: i32,
    reason: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteWithReason",
      "castVoteWithReason(uint256,uint8,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteWithReasonAndParams(
    proposalId: BigInt,
    support: i32,
    reason: string,
    params: Bytes
  ): BigInt {
    let result = super.call(
      "castVoteWithReasonAndParams",
      "castVoteWithReasonAndParams(uint256,uint8,string,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason),
        ethereum.Value.fromBytes(params)
      ]
    );

    return result[0].toBigInt();
  }

  try_castVoteWithReasonAndParams(
    proposalId: BigInt,
    support: i32,
    reason: string,
    params: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteWithReasonAndParams",
      "castVoteWithReasonAndParams(uint256,uint8,string,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason),
        ethereum.Value.fromBytes(params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteWithReasonAndParamsBySig(
    proposalId: BigInt,
    support: i32,
    reason: string,
    params: Bytes,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "castVoteWithReasonAndParamsBySig",
      "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason),
        ethereum.Value.fromBytes(params),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_castVoteWithReasonAndParamsBySig(
    proposalId: BigInt,
    support: i32,
    reason: string,
    params: Bytes,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteWithReasonAndParamsBySig",
      "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason),
        ethereum.Value.fromBytes(params),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  clock(): BigInt {
    let result = super.call("clock", "clock():(uint48)", []);

    return result[0].toBigInt();
  }

  try_clock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("clock", "clock():(uint48)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eip712Domain(): FraxGovernorOmega__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );

    return new FraxGovernorOmega__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray()
    );
  }

  try_eip712Domain(): ethereum.CallResult<
    FraxGovernorOmega__eip712DomainResult
  > {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxGovernorOmega__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray()
      )
    );
  }

  fractionalVoteNonce(param0: Address): BigInt {
    let result = super.call(
      "fractionalVoteNonce",
      "fractionalVoteNonce(address):(uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_fractionalVoteNonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fractionalVoteNonce",
      "fractionalVoteNonce(address):(uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotes(account: Address, timepoint: BigInt): BigInt {
    let result = super.call("getVotes", "getVotes(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(timepoint)
    ]);

    return result[0].toBigInt();
  }

  try_getVotes(
    account: Address,
    timepoint: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotes",
      "getVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timepoint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotesWithParams(
    account: Address,
    timepoint: BigInt,
    params: Bytes
  ): BigInt {
    let result = super.call(
      "getVotesWithParams",
      "getVotesWithParams(address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timepoint),
        ethereum.Value.fromBytes(params)
      ]
    );

    return result[0].toBigInt();
  }

  try_getVotesWithParams(
    account: Address,
    timepoint: BigInt,
    params: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotesWithParams",
      "getVotesWithParams(address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timepoint),
        ethereum.Value.fromBytes(params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasVoted(proposalId: BigInt, account: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(
    proposalId: BigInt,
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashProposal(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes
  ): BigInt {
    let result = super.call(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash)
      ]
    );

    return result[0].toBigInt();
  }

  try_hashProposal(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastSnapshotTime(): BigInt {
    let result = super.call(
      "lastSnapshotTime",
      "lastSnapshotTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastSnapshotTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastSnapshotTime",
      "lastSnapshotTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  proposalDeadline(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalDeadline",
      "proposalDeadline(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_proposalDeadline(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalDeadline",
      "proposalDeadline(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalProposer(proposalId: BigInt): Address {
    let result = super.call(
      "proposalProposer",
      "proposalProposer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toAddress();
  }

  try_proposalProposer(proposalId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proposalProposer",
      "proposalProposer(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalSnapshot(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalSnapshot",
      "proposalSnapshot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_proposalSnapshot(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalSnapshot",
      "proposalSnapshot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalThreshold(): BigInt {
    let result = super.call(
      "proposalThreshold",
      "proposalThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalThreshold",
      "proposalThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalVotes(proposalId: BigInt): FraxGovernorOmega__proposalVotesResult {
    let result = super.call(
      "proposalVotes",
      "proposalVotes(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return new FraxGovernorOmega__proposalVotesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_proposalVotes(
    proposalId: BigInt
  ): ethereum.CallResult<FraxGovernorOmega__proposalVotesResult> {
    let result = super.tryCall(
      "proposalVotes",
      "proposalVotes(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxGovernorOmega__proposalVotesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  proposals(param0: BigInt): FraxGovernorOmega__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(uint256):(address,uint40,uint40,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new FraxGovernorOmega__proposalsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBoolean()
    );
  }

  try_proposals(
    param0: BigInt
  ): ethereum.CallResult<FraxGovernorOmega__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(uint256):(address,uint40,uint40,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxGovernorOmega__proposalsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBoolean()
      )
    );
  }

  propose(
    param0: Array<Address>,
    param1: Array<BigInt>,
    param2: Array<Bytes>,
    param3: string
  ): BigInt {
    let result = super.call(
      "propose",
      "propose(address[],uint256[],bytes[],string):(uint256)",
      [
        ethereum.Value.fromAddressArray(param0),
        ethereum.Value.fromUnsignedBigIntArray(param1),
        ethereum.Value.fromBytesArray(param2),
        ethereum.Value.fromString(param3)
      ]
    );

    return result[0].toBigInt();
  }

  try_propose(
    param0: Array<Address>,
    param1: Array<BigInt>,
    param2: Array<Bytes>,
    param3: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "propose",
      "propose(address[],uint256[],bytes[],string):(uint256)",
      [
        ethereum.Value.fromAddressArray(param0),
        ethereum.Value.fromUnsignedBigIntArray(param1),
        ethereum.Value.fromBytesArray(param2),
        ethereum.Value.fromString(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorum(timepoint: BigInt): BigInt {
    let result = super.call("quorum", "quorum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(timepoint)
    ]);

    return result[0].toBigInt();
  }

  try_quorum(timepoint: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quorum", "quorum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(timepoint)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumDenominator(): BigInt {
    let result = super.call(
      "quorumDenominator",
      "quorumDenominator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_quorumDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumDenominator",
      "quorumDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumNumerator(timepoint: BigInt): BigInt {
    let result = super.call(
      "quorumNumerator",
      "quorumNumerator(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)]
    );

    return result[0].toBigInt();
  }

  try_quorumNumerator(timepoint: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumNumerator",
      "quorumNumerator(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumNumerator1(): BigInt {
    let result = super.call(
      "quorumNumerator",
      "quorumNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_quorumNumerator1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumNumerator",
      "quorumNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shortCircuitNumerator(): BigInt {
    let result = super.call(
      "shortCircuitNumerator",
      "shortCircuitNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_shortCircuitNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shortCircuitNumerator",
      "shortCircuitNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shortCircuitNumerator1(timepoint: BigInt): BigInt {
    let result = super.call(
      "shortCircuitNumerator",
      "shortCircuitNumerator(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)]
    );

    return result[0].toBigInt();
  }

  try_shortCircuitNumerator1(timepoint: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shortCircuitNumerator",
      "shortCircuitNumerator(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shortCircuitThreshold(timepoint: BigInt): BigInt {
    let result = super.call(
      "shortCircuitThreshold",
      "shortCircuitThreshold(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)]
    );

    return result[0].toBigInt();
  }

  try_shortCircuitThreshold(timepoint: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shortCircuitThreshold",
      "shortCircuitThreshold(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timepoint)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(proposalId: BigInt): i32 {
    let result = super.call("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toI32();
  }

  try_state(proposalId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  voteWeightCast(proposalId: BigInt, account: Address): BigInt {
    let result = super.call(
      "voteWeightCast",
      "voteWeightCast(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_voteWeightCast(
    proposalId: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "voteWeightCast",
      "voteWeightCast(uint256,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingDelay(): BigInt {
    let result = super.call("votingDelay", "votingDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingDelay", "votingDelay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPeriod(): BigInt {
    let result = super.call("votingPeriod", "votingPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingPeriod", "votingPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get params(): ConstructorCallParamsStruct {
    return changetype<ConstructorCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get veFxs(): Address {
    return this[1].toAddress();
  }

  get veFxsVotingDelegation(): Address {
    return this[2].toAddress();
  }

  get safeAllowlist(): Array<Address> {
    return this[3].toAddressArray();
  }

  get delegateCallAllowlist(): Array<Address> {
    return this[4].toAddressArray();
  }

  get timelockController(): Address {
    return this[5].toAddress();
  }

  get initialVotingDelay(): BigInt {
    return this[6].toBigInt();
  }

  get initialVotingPeriod(): BigInt {
    return this[7].toBigInt();
  }

  get initialProposalThreshold(): BigInt {
    return this[8].toBigInt();
  }

  get quorumNumeratorValue(): BigInt {
    return this[9].toBigInt();
  }

  get initialVotingDelayBlocks(): BigInt {
    return this[10].toBigInt();
  }

  get initialShortCircuitNumerator(): BigInt {
    return this[11].toBigInt();
  }
}

export class AbortTransactionCall extends ethereum.Call {
  get inputs(): AbortTransactionCall__Inputs {
    return new AbortTransactionCall__Inputs(this);
  }

  get outputs(): AbortTransactionCall__Outputs {
    return new AbortTransactionCall__Outputs(this);
  }
}

export class AbortTransactionCall__Inputs {
  _call: AbortTransactionCall;

  constructor(call: AbortTransactionCall) {
    this._call = call;
  }

  get teamSafe(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get signatures(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AbortTransactionCall__Outputs {
  _call: AbortTransactionCall;

  constructor(call: AbortTransactionCall) {
    this._call = call;
  }
}

export class AddToDelegateCallAllowlistCall extends ethereum.Call {
  get inputs(): AddToDelegateCallAllowlistCall__Inputs {
    return new AddToDelegateCallAllowlistCall__Inputs(this);
  }

  get outputs(): AddToDelegateCallAllowlistCall__Outputs {
    return new AddToDelegateCallAllowlistCall__Outputs(this);
  }
}

export class AddToDelegateCallAllowlistCall__Inputs {
  _call: AddToDelegateCallAllowlistCall;

  constructor(call: AddToDelegateCallAllowlistCall) {
    this._call = call;
  }

  get contracts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddToDelegateCallAllowlistCall__Outputs {
  _call: AddToDelegateCallAllowlistCall;

  constructor(call: AddToDelegateCallAllowlistCall) {
    this._call = call;
  }
}

export class AddToSafeAllowlistCall extends ethereum.Call {
  get inputs(): AddToSafeAllowlistCall__Inputs {
    return new AddToSafeAllowlistCall__Inputs(this);
  }

  get outputs(): AddToSafeAllowlistCall__Outputs {
    return new AddToSafeAllowlistCall__Outputs(this);
  }
}

export class AddToSafeAllowlistCall__Inputs {
  _call: AddToSafeAllowlistCall;

  constructor(call: AddToSafeAllowlistCall) {
    this._call = call;
  }

  get safes(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddToSafeAllowlistCall__Outputs {
  _call: AddToSafeAllowlistCall;

  constructor(call: AddToSafeAllowlistCall) {
    this._call = call;
  }
}

export class AddTransactionCall extends ethereum.Call {
  get inputs(): AddTransactionCall__Inputs {
    return new AddTransactionCall__Inputs(this);
  }

  get outputs(): AddTransactionCall__Outputs {
    return new AddTransactionCall__Outputs(this);
  }
}

export class AddTransactionCall__Inputs {
  _call: AddTransactionCall;

  constructor(call: AddTransactionCall) {
    this._call = call;
  }

  get teamSafe(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get args(): AddTransactionCallArgsStruct {
    return changetype<AddTransactionCallArgsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get signatures(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AddTransactionCall__Outputs {
  _call: AddTransactionCall;

  constructor(call: AddTransactionCall) {
    this._call = call;
  }

  get optimisticProposalId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddTransactionCallArgsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }

  get operation(): i32 {
    return this[3].toI32();
  }

  get safeTxGas(): BigInt {
    return this[4].toBigInt();
  }

  get baseGas(): BigInt {
    return this[5].toBigInt();
  }

  get gasPrice(): BigInt {
    return this[6].toBigInt();
  }

  get gasToken(): Address {
    return this[7].toAddress();
  }

  get refundReceiver(): Address {
    return this[8].toAddress();
  }

  get _nonce(): BigInt {
    return this[9].toBigInt();
  }
}

export class BatchAddTransactionCall extends ethereum.Call {
  get inputs(): BatchAddTransactionCall__Inputs {
    return new BatchAddTransactionCall__Inputs(this);
  }

  get outputs(): BatchAddTransactionCall__Outputs {
    return new BatchAddTransactionCall__Outputs(this);
  }
}

export class BatchAddTransactionCall__Inputs {
  _call: BatchAddTransactionCall;

  constructor(call: BatchAddTransactionCall) {
    this._call = call;
  }

  get teamSafes(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get args(): Array<BatchAddTransactionCallArgsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      BatchAddTransactionCallArgsStruct
    >();
  }

  get signatures(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class BatchAddTransactionCall__Outputs {
  _call: BatchAddTransactionCall;

  constructor(call: BatchAddTransactionCall) {
    this._call = call;
  }

  get optimisticProposalIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class BatchAddTransactionCallArgsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }

  get operation(): i32 {
    return this[3].toI32();
  }

  get safeTxGas(): BigInt {
    return this[4].toBigInt();
  }

  get baseGas(): BigInt {
    return this[5].toBigInt();
  }

  get gasPrice(): BigInt {
    return this[6].toBigInt();
  }

  get gasToken(): Address {
    return this[7].toAddress();
  }

  get refundReceiver(): Address {
    return this[8].toAddress();
  }

  get _nonce(): BigInt {
    return this[9].toBigInt();
  }
}

export class BulkCastVoteCall extends ethereum.Call {
  get inputs(): BulkCastVoteCall__Inputs {
    return new BulkCastVoteCall__Inputs(this);
  }

  get outputs(): BulkCastVoteCall__Outputs {
    return new BulkCastVoteCall__Outputs(this);
  }
}

export class BulkCastVoteCall__Inputs {
  _call: BulkCastVoteCall;

  constructor(call: BulkCastVoteCall) {
    this._call = call;
  }

  get proposalId(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get support(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }
}

export class BulkCastVoteCall__Outputs {
  _call: BulkCastVoteCall;

  constructor(call: BulkCastVoteCall) {
    this._call = call;
  }
}

export class CastVoteCall extends ethereum.Call {
  get inputs(): CastVoteCall__Inputs {
    return new CastVoteCall__Inputs(this);
  }

  get outputs(): CastVoteCall__Outputs {
    return new CastVoteCall__Outputs(this);
  }
}

export class CastVoteCall__Inputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CastVoteCall__Outputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteBySigCall extends ethereum.Call {
  get inputs(): CastVoteBySigCall__Inputs {
    return new CastVoteBySigCall__Inputs(this);
  }

  get outputs(): CastVoteBySigCall__Outputs {
    return new CastVoteBySigCall__Outputs(this);
  }
}

export class CastVoteBySigCall__Inputs {
  _call: CastVoteBySigCall;

  constructor(call: CastVoteBySigCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CastVoteBySigCall__Outputs {
  _call: CastVoteBySigCall;

  constructor(call: CastVoteBySigCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteWithReasonCall extends ethereum.Call {
  get inputs(): CastVoteWithReasonCall__Inputs {
    return new CastVoteWithReasonCall__Inputs(this);
  }

  get outputs(): CastVoteWithReasonCall__Outputs {
    return new CastVoteWithReasonCall__Outputs(this);
  }
}

export class CastVoteWithReasonCall__Inputs {
  _call: CastVoteWithReasonCall;

  constructor(call: CastVoteWithReasonCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CastVoteWithReasonCall__Outputs {
  _call: CastVoteWithReasonCall;

  constructor(call: CastVoteWithReasonCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteWithReasonAndParamsCall extends ethereum.Call {
  get inputs(): CastVoteWithReasonAndParamsCall__Inputs {
    return new CastVoteWithReasonAndParamsCall__Inputs(this);
  }

  get outputs(): CastVoteWithReasonAndParamsCall__Outputs {
    return new CastVoteWithReasonAndParamsCall__Outputs(this);
  }
}

export class CastVoteWithReasonAndParamsCall__Inputs {
  _call: CastVoteWithReasonAndParamsCall;

  constructor(call: CastVoteWithReasonAndParamsCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }

  get params(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CastVoteWithReasonAndParamsCall__Outputs {
  _call: CastVoteWithReasonAndParamsCall;

  constructor(call: CastVoteWithReasonAndParamsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteWithReasonAndParamsBySigCall extends ethereum.Call {
  get inputs(): CastVoteWithReasonAndParamsBySigCall__Inputs {
    return new CastVoteWithReasonAndParamsBySigCall__Inputs(this);
  }

  get outputs(): CastVoteWithReasonAndParamsBySigCall__Outputs {
    return new CastVoteWithReasonAndParamsBySigCall__Outputs(this);
  }
}

export class CastVoteWithReasonAndParamsBySigCall__Inputs {
  _call: CastVoteWithReasonAndParamsBySigCall;

  constructor(call: CastVoteWithReasonAndParamsBySigCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }

  get params(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class CastVoteWithReasonAndParamsBySigCall__Outputs {
  _call: CastVoteWithReasonAndParamsBySigCall;

  constructor(call: CastVoteWithReasonAndParamsBySigCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get descriptionHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RejectTransactionCall extends ethereum.Call {
  get inputs(): RejectTransactionCall__Inputs {
    return new RejectTransactionCall__Inputs(this);
  }

  get outputs(): RejectTransactionCall__Outputs {
    return new RejectTransactionCall__Outputs(this);
  }
}

export class RejectTransactionCall__Inputs {
  _call: RejectTransactionCall;

  constructor(call: RejectTransactionCall) {
    this._call = call;
  }

  get teamSafe(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RejectTransactionCall__Outputs {
  _call: RejectTransactionCall;

  constructor(call: RejectTransactionCall) {
    this._call = call;
  }
}

export class RelayCall extends ethereum.Call {
  get inputs(): RelayCall__Inputs {
    return new RelayCall__Inputs(this);
  }

  get outputs(): RelayCall__Outputs {
    return new RelayCall__Outputs(this);
  }
}

export class RelayCall__Inputs {
  _call: RelayCall;

  constructor(call: RelayCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RelayCall__Outputs {
  _call: RelayCall;

  constructor(call: RelayCall) {
    this._call = call;
  }
}

export class RemoveFromDelegateCallAllowlistCall extends ethereum.Call {
  get inputs(): RemoveFromDelegateCallAllowlistCall__Inputs {
    return new RemoveFromDelegateCallAllowlistCall__Inputs(this);
  }

  get outputs(): RemoveFromDelegateCallAllowlistCall__Outputs {
    return new RemoveFromDelegateCallAllowlistCall__Outputs(this);
  }
}

export class RemoveFromDelegateCallAllowlistCall__Inputs {
  _call: RemoveFromDelegateCallAllowlistCall;

  constructor(call: RemoveFromDelegateCallAllowlistCall) {
    this._call = call;
  }

  get contracts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveFromDelegateCallAllowlistCall__Outputs {
  _call: RemoveFromDelegateCallAllowlistCall;

  constructor(call: RemoveFromDelegateCallAllowlistCall) {
    this._call = call;
  }
}

export class RemoveFromSafeAllowlistCall extends ethereum.Call {
  get inputs(): RemoveFromSafeAllowlistCall__Inputs {
    return new RemoveFromSafeAllowlistCall__Inputs(this);
  }

  get outputs(): RemoveFromSafeAllowlistCall__Outputs {
    return new RemoveFromSafeAllowlistCall__Outputs(this);
  }
}

export class RemoveFromSafeAllowlistCall__Inputs {
  _call: RemoveFromSafeAllowlistCall;

  constructor(call: RemoveFromSafeAllowlistCall) {
    this._call = call;
  }

  get safes(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveFromSafeAllowlistCall__Outputs {
  _call: RemoveFromSafeAllowlistCall;

  constructor(call: RemoveFromSafeAllowlistCall) {
    this._call = call;
  }
}

export class SetProposalThresholdCall extends ethereum.Call {
  get inputs(): SetProposalThresholdCall__Inputs {
    return new SetProposalThresholdCall__Inputs(this);
  }

  get outputs(): SetProposalThresholdCall__Outputs {
    return new SetProposalThresholdCall__Outputs(this);
  }
}

export class SetProposalThresholdCall__Inputs {
  _call: SetProposalThresholdCall;

  constructor(call: SetProposalThresholdCall) {
    this._call = call;
  }

  get newProposalThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProposalThresholdCall__Outputs {
  _call: SetProposalThresholdCall;

  constructor(call: SetProposalThresholdCall) {
    this._call = call;
  }
}

export class SetSafeVotingPeriodCall extends ethereum.Call {
  get inputs(): SetSafeVotingPeriodCall__Inputs {
    return new SetSafeVotingPeriodCall__Inputs(this);
  }

  get outputs(): SetSafeVotingPeriodCall__Outputs {
    return new SetSafeVotingPeriodCall__Outputs(this);
  }
}

export class SetSafeVotingPeriodCall__Inputs {
  _call: SetSafeVotingPeriodCall;

  constructor(call: SetSafeVotingPeriodCall) {
    this._call = call;
  }

  get safe(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newSafeVotingPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetSafeVotingPeriodCall__Outputs {
  _call: SetSafeVotingPeriodCall;

  constructor(call: SetSafeVotingPeriodCall) {
    this._call = call;
  }
}

export class SetVeFxsVotingDelegationCall extends ethereum.Call {
  get inputs(): SetVeFxsVotingDelegationCall__Inputs {
    return new SetVeFxsVotingDelegationCall__Inputs(this);
  }

  get outputs(): SetVeFxsVotingDelegationCall__Outputs {
    return new SetVeFxsVotingDelegationCall__Outputs(this);
  }
}

export class SetVeFxsVotingDelegationCall__Inputs {
  _call: SetVeFxsVotingDelegationCall;

  constructor(call: SetVeFxsVotingDelegationCall) {
    this._call = call;
  }

  get veFxsVotingDelegation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVeFxsVotingDelegationCall__Outputs {
  _call: SetVeFxsVotingDelegationCall;

  constructor(call: SetVeFxsVotingDelegationCall) {
    this._call = call;
  }
}

export class SetVotingDelayCall extends ethereum.Call {
  get inputs(): SetVotingDelayCall__Inputs {
    return new SetVotingDelayCall__Inputs(this);
  }

  get outputs(): SetVotingDelayCall__Outputs {
    return new SetVotingDelayCall__Outputs(this);
  }
}

export class SetVotingDelayCall__Inputs {
  _call: SetVotingDelayCall;

  constructor(call: SetVotingDelayCall) {
    this._call = call;
  }

  get newVotingDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVotingDelayCall__Outputs {
  _call: SetVotingDelayCall;

  constructor(call: SetVotingDelayCall) {
    this._call = call;
  }
}

export class SetVotingDelayBlocksCall extends ethereum.Call {
  get inputs(): SetVotingDelayBlocksCall__Inputs {
    return new SetVotingDelayBlocksCall__Inputs(this);
  }

  get outputs(): SetVotingDelayBlocksCall__Outputs {
    return new SetVotingDelayBlocksCall__Outputs(this);
  }
}

export class SetVotingDelayBlocksCall__Inputs {
  _call: SetVotingDelayBlocksCall;

  constructor(call: SetVotingDelayBlocksCall) {
    this._call = call;
  }

  get newVotingDelayBlocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVotingDelayBlocksCall__Outputs {
  _call: SetVotingDelayBlocksCall;

  constructor(call: SetVotingDelayBlocksCall) {
    this._call = call;
  }
}

export class SetVotingPeriodCall extends ethereum.Call {
  get inputs(): SetVotingPeriodCall__Inputs {
    return new SetVotingPeriodCall__Inputs(this);
  }

  get outputs(): SetVotingPeriodCall__Outputs {
    return new SetVotingPeriodCall__Outputs(this);
  }
}

export class SetVotingPeriodCall__Inputs {
  _call: SetVotingPeriodCall;

  constructor(call: SetVotingPeriodCall) {
    this._call = call;
  }

  get newVotingPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVotingPeriodCall__Outputs {
  _call: SetVotingPeriodCall;

  constructor(call: SetVotingPeriodCall) {
    this._call = call;
  }
}

export class UpdateQuorumNumeratorCall extends ethereum.Call {
  get inputs(): UpdateQuorumNumeratorCall__Inputs {
    return new UpdateQuorumNumeratorCall__Inputs(this);
  }

  get outputs(): UpdateQuorumNumeratorCall__Outputs {
    return new UpdateQuorumNumeratorCall__Outputs(this);
  }
}

export class UpdateQuorumNumeratorCall__Inputs {
  _call: UpdateQuorumNumeratorCall;

  constructor(call: UpdateQuorumNumeratorCall) {
    this._call = call;
  }

  get newQuorumNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateQuorumNumeratorCall__Outputs {
  _call: UpdateQuorumNumeratorCall;

  constructor(call: UpdateQuorumNumeratorCall) {
    this._call = call;
  }
}

export class UpdateShortCircuitNumeratorCall extends ethereum.Call {
  get inputs(): UpdateShortCircuitNumeratorCall__Inputs {
    return new UpdateShortCircuitNumeratorCall__Inputs(this);
  }

  get outputs(): UpdateShortCircuitNumeratorCall__Outputs {
    return new UpdateShortCircuitNumeratorCall__Outputs(this);
  }
}

export class UpdateShortCircuitNumeratorCall__Inputs {
  _call: UpdateShortCircuitNumeratorCall;

  constructor(call: UpdateShortCircuitNumeratorCall) {
    this._call = call;
  }

  get newShortCircuitNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateShortCircuitNumeratorCall__Outputs {
  _call: UpdateShortCircuitNumeratorCall;

  constructor(call: UpdateShortCircuitNumeratorCall) {
    this._call = call;
  }
}
